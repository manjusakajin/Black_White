#include <stdlib.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <unistd.h> 
#include <signal.h> 
#include <sys/wait.h>

#define MAXLINE 4096 /*max text line length*/
#define SERV_PORT 3000 /*port*/
#define LISTENQ 8 /*maximum number of client connections*/

void sig_chld(int signo)
{
pid_t pid;
int stat;
while ( (pid = waitpid(-1, &stat, WNOHANG)) > 0)
printf("child %d terminated\n", pid);
return;
} 
int main (int argc, char **argv)
{
 fd_set readfds; 
 struct timeval tv;
 int listenfd, connfd, n, maxfd;
 int client[8];
 pid_t childpid;
 socklen_t clilen;
 char buf[MAXLINE];
 struct sockaddr_in cliaddr, servaddr;

 //Create a socket for the soclet
 //If sockfd<0 there was an error in the creation of the socket
 if ((listenfd = socket (AF_INET, SOCK_STREAM, 0)) <0) {
  perror("Problem in creating the socket");
  exit(2);
 }
  // set timeout
  tv.tv_sec = 10; 
  tv.tv_usec = 500000; 
 //preparation of the socket address
 servaddr.sin_family = AF_INET;
 servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
 servaddr.sin_port = htons(SERV_PORT);

 //bind the socket
 bind (listenfd, (struct sockaddr *) &servaddr, sizeof(servaddr));

 //listen to the socket by creating a connection queue, then wait for clients
 listen (listenfd, LISTENQ);
 maxfd = listenfd; 

 printf("%s\n","Server running...waiting for connections.");
 for(i=0;i<8;i++) client[i] = -1; // khởi tạo client
 
 // clear the set ahead of time 
     FD_ZERO(&readfds); 
 // add our descriptors to the set 
     FD_SET(listenfd, &readfds);
while(...){ 
nEvents = select(...); 
//check the status of listenfd 
if(FD_ISSET(listenfd,...)){ 
connfd = accept(...); 
maxfd = connfd; 
if (client[i] == -1) 
client[i] = connfd; 
} 
//check the status of connfd(s) 
for(...){ 
if(FD_ISSET(client[i],...)){ 
doSomething(); 
close(connfd); 
client[i] = -1; 
FD_CLEAR(client[i],...)
} 
}
 
 }

}
